#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('RaftDistributedStore:server');
var http = require('http');
var portfinder = require('portfinder');
//var levelup = require('levelup');

var level = require('level');
var Replicator = require('level-2pc');
var net = require('net');


/**
 * Get port from environment and store in Express.
 */
var server = http.createServer(app);
console.log("HELLOOOO2");


var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

var dbName = '../DB' + port;

console.log("Using DB name: " + dbName);

//var db = levelup(dbName);




function createOpts(localport, hosts, ports, min, failAfter) {
 /* var peers = ports.map(function(thisPort) {
    return { host: 'localhost', port: thisPort }
  })*/
  var peers = [];
  for (var i = 0; i < ports.length; i++) {
    if (hosts[i] != "" && ports[i] != "") {
      var peer = {};
      peer.host = hosts[i];
      peer.port = ports[i];
      peers.push(peer); 
    }
  }

  return { 
    peers: peers,
    port: localport,
    minConsensus: min,
    failAfter: failAfter || 16,
    host: 'localhost'
  }
}

  if (process.env.NODEPORTS)
    var nodePorts = process.env.NODEPORTS.toString().split(",");
  else
    var nodePorts = [];

  console.log("Connecting to " + nodePorts.length + " node ports");
  console.log("Node Ports:" + nodePorts);

  if (process.env.NODEHOSTS)
    var nodeHosts = process.env.NODEHOSTS.toString().split(",");
  else
    var nodeHosts = [];

  console.log("Connecting to " + nodeHosts.length + " node hosts");
  console.log("Node Hosts:" + nodeHosts);
  


  var twoPhasePort = normalizePort(process.env.SKIFFPORT || '3002');

  var db = level(dbName, { keyEncoding: 'utf8', valueEncoding: 'utf8' });

  app.set('node', db);

  var replicator = Replicator(db, createOpts(twoPhasePort, nodeHosts, nodePorts));

  replicator.on('error', function(error) {
    console.log("Error: ");
    console.log(error);
  });
  replicator.on('notready', function() {
    console.log("Not Ready");
  });
  replicator.on('connect', function(host, thisPort) {
    console.log("Connect: " + host + " : " + thisPort);
  });
  replicator.on('disconnect', function() {
    console.log("Disconnect ");
  });
  replicator.on('reconnect', function() {
    console.log("Reconnect ");
  });
  replicator.on('fail', function() {
    console.log("Fail ");
  });

  var twoPhaseServer = net.createServer(function(con) {
      var thisServer = replicator.createServer()
      thisServer.pipe(con).pipe(thisServer)
    }).listen(twoPhasePort)




/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
