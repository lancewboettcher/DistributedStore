#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('RaftDistributedStore:server');
var http = require('http');
var portfinder = require('portfinder');
//var levelup = require('levelup');

var level = require('level');
var Replicator = require('level-2pc');
var net = require('net');


/**
 * Get port from environment and store in Express.
 */
var server = http.createServer(app);
console.log("HELLOOOO2");


var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

var dbName = '../DB' + port;

console.log("Using DB name: " + dbName);

//var db = levelup(dbName);




function createOpts(localport, ports, min, failAfter) {
  var peers = ports.map(function(port) {
    return { host: 'localhost', port: port }
  })

  return { 
    peers: peers,
    port: localport,
    minConsensus: min,
    failAfter: failAfter || 16,
    host: 'localhost'
  }
}

var i = 4;
  var dbs = {};
  var rs = {};
  var servers = {};

  while(i > 0) {
    dbs['db' + i] = level('../DB' + i, { keyEncoding: 'utf8', valueEncoding: 'utf8' });
    i--;
  }

  app.set('node', dbs.db1);

  rs.r1 = Replicator(dbs.db1, createOpts(3001, []));

  rs.r1.on('error', function(error) {
    console.log("Error: ");
    console.log(error);
  });
  rs.r1.on('notready', function() {
    console.log("Not Ready");
  });
  rs.r1.on('connect', function(host, port) {
    console.log("Connect: " + host + " : " + port);
  });
  rs.r1.on('disconnect', function() {
    console.log("Disconnect ");
  });
  rs.r1.on('reconnect', function() {
    console.log("Reconnect ");
  });
  rs.r1.on('fail', function() {
    console.log("Fail ");
  });

  servers.r1 = net.createServer(function(con) {
      var server = rs.r1.createServer()
      server.pipe(con).pipe(server)
    }).listen(3001)


  rs.r2 = Replicator(dbs.db2, createOpts(3002, [3001]));

  rs.r2.on('error', function(error) {
    console.log("Error: ");
    console.log(error);
  });
  rs.r2.on('notready', function() {
    console.log("Not Ready");
  });
  rs.r2.on('connect', function(host, port) {
    console.log("Connect: " + host + " : " + port);
  });
  rs.r2.on('disconnect', function() {
    console.log("Disconnect ");
  });
  rs.r2.on('reconnect', function() {
    console.log("Reconnect ");
  });
  rs.r2.on('fail', function() {
    console.log("Fail ");
  });

  servers.r2 = net.createServer(function(con) {
      var server = rs.r2.createServer()
      server.pipe(con).pipe(server)
    }).listen(3002)

/*
rs.r1 = Replicator(dbs.db1, createOpts(3001, [3002, 3003, 3004]))
    rs.r2 = Replicator(dbs.db2, createOpts(3002, [3003, 3001, 3004]))
    rs.r3 = Replicator(dbs.db3, createOpts(3003, [3001, 3002, 3004]))
    rs.r4 = Replicator(dbs.db3, createOpts(3004, [3001, 3002, 3003]))

    servers.r1 = net.createServer(function(con) {
      var server = rs.r1.createServer()
      server.pipe(con).pipe(server)
    }).listen(3001)

    servers.r2 = net.createServer(function(con) {
      var server = rs.r2.createServer()
      server.pipe(con).pipe(server)
    }).listen(3002)

    servers.r3 = net.createServer(function(con) {
      var server = rs.r3.createServer()
      server.pipe(con).pipe(server)
    }).listen(3003)

    servers.r4 = net.createServer(function(con) {
      var server = rs.r4.createServer()
      server.pipe(con).pipe(server)
    }).listen(3004)
*/

/*
var db = level(dbName, { valueEncoding: 'json' });

app.set('node', db);

var opts = {
  peers: [
    { host: 'localhost', port: 3001 },
    { host: 'localhost', port: 3002 }
  ]
};

var r = Replicator(db, opts);

net.createServer(function(con) {
  var dbServer = r.createServer();
  server.pipe(con).pipe(dbServer);
}).listen(3000);
*/






/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
